{
	"extends": [
		"eslint:recommended",
		"plugin:eslint-comments/recommended",
		"plugin:sort-decorators/strict"
	],
	"overrides": [
		{
			"extends": ["plugin:jsdoc/recommended"],
			"files": ["*.js", "*.jsx", "*.ts", "*.tsx"],
			"plugins": ["jsdoc"],
			"rules": {
				"@nx/enforce-module-boundaries": [
					"error",
					{
						"allow": [],
						"depConstraints": [
							{
								"onlyDependOnLibsWithTags": ["*"],
								"sourceTag": "*"
							},
							{
								"bannedExternalImports": [
									"@anatine/zod-nestjs",
									"@anatine/zod-openapi",
									"@mikro-orm/**",
									"@nestjs/**"
								],
								"sourceTag": "scope:frontend"
							},
							{
								"bannedExternalImports": [
									"@angular/**",
									"zone.js"
								],
								"sourceTag": "scope:backend"
							}
						],
						"enforceBuildableLibDependency": true
					}
				],
				"jsdoc/multiline-blocks": [
					"error",
					{
						"minimumLengthForMultiline": 60,
						"noMultilineBlocks": true
					}
				],
				"jsdoc/no-blank-blocks": [
					"error",
					{
						"enableFixer": true
					}
				],
				"jsdoc/no-undefined-types": "off",
				"jsdoc/require-asterisk-prefix": ["error", "always"],
				/* Hyphen is considered as a bullet point in compodoc */
				"jsdoc/require-hyphen-before-param-description": [
					"error",
					"never"
				],
				"jsdoc/require-jsdoc": [
					"warn",
					{
						"contexts": [
							"TSEnumDeclaration",
							"TSInterfaceDeclaration"
						],
						"publicOnly": true
					}
				],
				"jsdoc/require-param": [
					"warn",
					{
						"exemptedBy": ["inheritDoc", "internal", "private"]
					}
				],
				"jsdoc/require-returns": [
					"warn",
					{
						"exemptedBy": ["inheritDoc", "internal", "private"]
					}
				],
				"jsdoc/require-throws": "warn",
				"jsdoc/tag-lines": [
					"error",
					"any",
					{
						"startLines": 1
					}
				],
				"sonarjs/no-all-duplicated-branches": "error",
				"sonarjs/no-element-overwrite": "error",
				"sonarjs/no-gratuitous-expressions": "error",
				"sonarjs/no-identical-conditions": "error",
				"sonarjs/no-identical-expressions": "error",
				"sonarjs/no-inverted-boolean-check": "error",
				"sonarjs/non-existent-operator": "error",
				"sonarjs/prefer-immediate-return": "error",
				"sonarjs/prefer-object-literal": "error",
				"sonarjs/prefer-single-boolean-return": "error",
				"sonarjs/prefer-while": "error",
				"unicorn/better-regex": "error",
				"unicorn/filename-case": [
					"error",
					{
						"case": "kebabCase"
					}
				],
				"unicorn/no-abusive-eslint-disable": "error",
				"unicorn/no-array-for-each": "error",
				"unicorn/no-array-push-push": "error",
				"unicorn/no-await-expression-member": "error",
				"unicorn/no-empty-file": "warn",
				"unicorn/no-for-loop": "error",
				"unicorn/no-instanceof-array": "error",
				"unicorn/no-lonely-if": "error",
				"unicorn/no-negated-condition": "error",
				"unicorn/no-thenable": "error",
				"unicorn/prefer-array-find": "error",
				"unicorn/prefer-array-flat": "error",
				"unicorn/prefer-array-flat-map": "error",
				"unicorn/prefer-array-some": "error",
				"unicorn/prefer-date-now": "error",
				"unicorn/prefer-default-parameters": "error",
				"unicorn/prefer-includes": "error",
				"unicorn/prefer-object-from-entries": "error",
				"unicorn/prefer-optional-catch-binding": "error",
				"unicorn/prefer-string-slice": "error",
				"unicorn/prefer-string-starts-ends-with": "error",
				"unicorn/throw-new-error": "error"
			}
		},
		{
			"extends": [
				"plugin:@nx/typescript",
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/recommended-requiring-type-checking",
				"plugin:@typescript-eslint/strict"
			],
			"files": ["*.ts", "*.tsx"],
			"parser": "@typescript-eslint/parser",
			"parserOptions": {
				"project": "./tsconfig.base.json"
			},
			"rules": {
				"@typescript-eslint/array-type": [
					"error",
					{
						"default": "array-simple"
					}
				],
				"@typescript-eslint/ban-ts-comment": [
					"error",
					{
						"ts-expect-error": {
							"descriptionFormat": "^ -- .+$"
						}
					}
				],
				"@typescript-eslint/ban-types": "error",
				"@typescript-eslint/consistent-generic-constructors": [
					"error",
					"constructor"
				],
				"@typescript-eslint/consistent-indexed-object-style": [
					"error",
					"record"
				],
				"@typescript-eslint/consistent-type-assertions": [
					"error",
					{
						"assertionStyle": "as",
						"objectLiteralTypeAssertions": "never"
					}
				],
				"@typescript-eslint/consistent-type-definitions": [
					"error",
					"interface"
				],
				"@typescript-eslint/consistent-type-exports": "error",
				"@typescript-eslint/explicit-member-accessibility": "error",
				"@typescript-eslint/member-delimiter-style": "error",
				"@typescript-eslint/member-ordering": [
					"error",
					{
						"default": {
							"memberTypes": [
								"signature",
								"static-field",
								"public-static-get",
								"protected-static-get",
								"private-static-get",
								"static-initialization",
								"public-static-method",
								"protected-static-method",
								"private-static-method",
								"public-abstract-field",
								"public-instance-field",
								"protected-abstract-field",
								"protected-instance-field",
								"private-instance-field",
								["public-abstract-get", "public-abstract-set"],
								["public-instance-get", "public-instance-set"],
								[
									"protected-abstract-get",
									"protected-abstract-set"
								],
								[
									"protected-instance-get",
									"protected-instance-set"
								],
								[
									"private-instance-get",
									"private-instance-set"
								],
								"constructor",
								"public-abstract-method",
								"public-instance-method",
								"protected-abstract-method",
								"protected-instance-method",
								"private-instance-method"
							]
						},
						"interfaces": "never"
					}
				],
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"format": ["PascalCase"],
						"selector": "enum"
					},
					{
						"format": ["UPPER_CASE"],
						"selector": "enumMember"
					}
				],
				"@typescript-eslint/no-confusing-non-null-assertion": "error",
				"@typescript-eslint/no-confusing-void-expression": [
					"error",
					{
						"ignoreArrowShorthand": true,
						"ignoreVoidOperator": true
					}
				],
				"@typescript-eslint/no-empty-interface": "error",
				"@typescript-eslint/no-extra-non-null-assertion": "error",
				"@typescript-eslint/no-extraneous-class": [
					"warn",
					{
						"allowWithDecorator": true
					}
				],
				"@typescript-eslint/no-for-in-array": "error",
				"@typescript-eslint/no-inferrable-types": "error",
				"@typescript-eslint/no-misused-new": "error",
				"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
				"@typescript-eslint/no-redundant-type-constituents": "error",
				"@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
				"@typescript-eslint/no-unsafe-declaration-merging": "warn",
				/* Managed by "unused-imports/no-unused-vars" */
				"@typescript-eslint/no-unused-vars": "off",
				"@typescript-eslint/no-use-before-define": [
					"error",
					{
						"classes": false,
						"functions": false,
						"ignoreTypeReferences": true,
						"typedefs": true
					}
				],
				"@typescript-eslint/prefer-enum-initializers": "error",
				"@typescript-eslint/prefer-for-of": "warn",
				"@typescript-eslint/prefer-includes": "warn",
				"@typescript-eslint/prefer-optional-chain": "warn",
				"@typescript-eslint/prefer-reduce-type-parameter": "error",
				"@typescript-eslint/prefer-return-this-type": "error",
				"@typescript-eslint/prefer-ts-expect-error": "error",
				"@typescript-eslint/sort-type-constituents": "error",
				"@typescript-eslint/type-annotation-spacing": "error",
				"decorator-position/decorator-position": [
					"error",
					{
						"methods": "above",
						"properties": "above"
					}
				],
				"etc/no-assign-mutated-array": "error",
				"etc/prefer-less-than": "warn",
				"jsdoc/require-param-type": "off",
				"jsdoc/require-returns-type": "off",
				"typescript-sort-keys/interface": "warn",
				"typescript-sort-keys/string-enum": "warn"
			}
		},
		{
			"extends": ["plugin:@nx/javascript"],
			"files": ["*.js", "*.jsx"],
			"rules": {}
		},
		/** Custom rules ("code") */
		{
			// Configuration files
			"files": [
				"cypress.config.ts",
				"jest.config.ts",
				"jest.preset.ts",
				"orm.config.ts",
				"webpack.config.ts"
			],
			"rules": {
				"import/no-default-export": "off"
			}
		},
		{
			"files": ["index.ts"],
			"plugins": ["sort-exports"],
			"rules": {
				"sort-exports/sort-exports": [
					"error",
					{
						"sortDir": "asc"
					}
				]
			}
		},
		{
			"env": {
				"jest": true
			},
			"extends": ["plugin:jest/recommended", "plugin:jest/style"],
			"files": ["*.spec.js", "*.spec.jsx", "*.spec.ts", "*.spec.tsx"],
			"plugins": ["jest"],
			"rules": {
				/* Ok for test files */
				"@typescript-eslint/no-non-null-assertion": "off",
				"jest/consistent-test-it": [
					"error",
					{
						"fn": "it"
					}
				],
				"jest/prefer-lowercase-title": [
					"error",
					{
						"ignore": ["describe"]
					}
				]
			}
		},
		{
			"files": ["*.handlebars", "*.hbs", "*.html"],
			"parser": "@html-eslint/parser",
			"plugins": ["sort-attribute-content"],
			"rules": {
				"prettier/prettier": "error",
				"sort-attribute-content/sort-attribute-content": [
					"error",
					[
						{
							"attributes": ["class"]
						}
					]
				]
			}
		},
		/** Custom rules ("non-code") */
		{
			"extends": [
				"plugin:jsonc/base",
				"plugin:jsonc/recommended-with-json"
			],
			"files": ["*.json"],
			"rules": {
				"jsonc/array-bracket-newline": [
					/* prettier */
					"off",
					{
						"minItems": 2,
						"multiline": true
					}
				],
				"jsonc/array-element-newline": [
					/* prettier */
					"off",
					"always"
				],
				"jsonc/indent": ["error", "tab"],
				"jsonc/key-spacing": [
					"error",
					{
						"afterColon": true,
						"beforeColon": false,
						"mode": "strict"
					}
				],
				"jsonc/no-comments": "warn",
				"jsonc/object-curly-newline": [
					"error",
					{
						"consistent": true,
						"minProperties": 1,
						"multiline": true
					}
				],
				"jsonc/object-property-newline": [
					"error",
					{
						"allowAllPropertiesOnSameLine": false
					}
				],
				"jsonc/sort-keys": "error",
				"no-multiple-empty-lines": [
					"error",
					{
						"max": 0
					}
				]
			}
		},
		{
			"files": [
				".devcontainer/**/devcontainer.json",
				".eslintrc.json",
				".prettierrc.json",
				".vscode/settings.json",
				"tsconfig.*.json",
				"tsconfig.json"
			],
			"rules": {
				/* OK for `rc` files */
				"jsonc/no-comments": "off",
				"jsonc/sort-array-values": [
					"warn",
					{
						"order": {
							"type": "asc"
						},
						"pathPattern": "compilerOptions.(lib|types)$|include$|files$|^exclude$|extends$|plugins$|cSpell.words|eslint.validate|auto-close-tag.\\w+|stylelint.\\w+|vscode.extensions$"
					}
				]
			}
		},
		{
			"files": ["nx.json"],
			"rules": {
				"jsonc/sort-array-values": [
					"warn",
					{
						"order": {
							"type": "asc"
						},
						"pathPattern": ""
					}
				]
			}
		},
		{
			"extends": [
				"plugin:yml/prettier",
				"plugin:yml/recommended",
				"plugin:yml/standard"
			],
			"files": ["*.yaml", "*.yml"],
			"parser": "yaml-eslint-parser",
			"rules": {
				"yml/block-sequence": ["error", "always"],
				"yml/sort-sequence-values": [
					"warn",
					{
						"order": {
							"type": "asc"
						},
						"pathPattern": ".*"
					}
				]
			}
		},
		{
			"files": ["*.sql"],
			"parser": "yaml-eslint-parser",
			"rules": {
				/* Only prettier*/
			}
		},
		{
			"extends": ["plugin:markdownlint/recommended"],
			"files": ["*.md"],
			"parser": "eslint-plugin-markdownlint/parser",
			"rules": {
				"markdownlint/md013": [
					"error",
					{
						"line_length": 200
					}
				],
				"markdownlint/md033": [
					"error",
					{
						"allowed_elements": ["a", "img"]
					}
				],
				"no-trailing-spaces": "off",
				"prettier/prettier": "off"
			}
		},
		{
			"files": ["Dockerfile"],
			"parser": "eslint-plugin-markdownlint/parser",
			"rules": {
				"prettier/prettier": "error"
			}
		},
		{
			"files": ["*.js", "*.ts"],
			"rules": {
				/* FIXME: There's a plugin that disables that rule (probably prettier) */
				"curly": ["error", "all"]
			}
		}
	],
	"plugins": [
		"@nx",
		"decorator-position",
		"eslint-plugin-import",
		"etc",
		"prettier",
		"sonarjs",
		"sort-destructure-keys",
		"sort-keys-plus",
		"typescript-sort-keys",
		"unicorn",
		"unused-imports"
	],
	"root": true,
	"rules": {
		"eqeqeq": "error",
		"eslint-comments/no-unused-disable": "error",
		"eslint-comments/require-description": [
			"warn",
			{
				"ignore": ["eslint", "eslint-enable"]
			}
		],
		"import/first": "error",
		"import/newline-after-import": "error",
		"import/no-default-export": "error",
		"import/no-mutable-exports": "error",
		"import/no-useless-path-segments": "error",
		"import/order": [
			"error",
			{
				"alphabetize": {
					"order": "asc"
				},
				"distinctGroup": false,
				"groups": [
					["builtin", "external"],
					["internal", "parent", "sibling", "index"],
					"object"
				],
				"newlines-between": "always",
				"pathGroups": [
					{
						"group": "external",
						"pattern": "@nna/**",
						"position": "after"
					},
					{
						"group": "external",
						"pattern": "~/**",
						"position": "after"
					}
				]
			}
		],
		"no-alert": "error",
		"no-console": "error",
		"no-empty": "error",
		"no-return-await": "error",
		"prefer-const": "error",
		"prefer-rest-params": "error",
		"prefer-template": "error",
		"prettier/prettier": "error",
		"sort-destructure-keys/sort-destructure-keys": "error",
		"sort-keys-plus/sort-keys": [
			"error",
			"asc",
			{
				"allowLineSeparatedGroups": true
			}
		],
		"sort-vars": "error",
		"unused-imports/no-unused-imports": "error",
		"unused-imports/no-unused-vars": [
			"warn",
			{
				"args": "after-used",
				"argsIgnorePattern": "^_",
				"varsIgnorePattern": "^_\\d*"
			}
		]
	}
}
