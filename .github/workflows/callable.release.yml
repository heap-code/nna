# Runs a release-process: prepares badges and then determine new version and them release

name: "[CALLABLE] Release"

on:
  workflow_call:
    inputs:
      generate-badges:
        description: Generate the code & comment coverage badges
        type: boolean
        default: true
      pre-release:
        description: 'Suffix for a pre-release. Empty string for a "normal release"'
        type: string
    secrets:
      GIT_TOKEN:
        required: true
      NX_WRITE_TOKEN:
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_WRITE_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Set git config
        run: |
          git config user.name "${{ vars.BOT_NAME }}"
          git config user.email "${{ vars.BOT_NAME }}@users.noreply.github.com"

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./package.json', './package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ env.cache-name }}-

      - if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        name: Install packages
        run: npm ci

      # If the cache is used
      - if: ${{ steps.cache-node-modules.outputs.cache-hit == 'true' }}
        run: npm run postinstall

      - if: ${{ inputs.generate-badges }}
        name: Generate code coverage summary
        run: npm run test:ci
      - if: ${{ inputs.generate-badges }}
        name: Generate code coverage badges
        run: for path in ./dist/coverage/*/*; do npx node-jest-badges -c "$path/coverage-summary.json" -o ".badges/${path:16}/code/"; done
      - if: ${{ inputs.generate-badges }}
        name: Set default code coverage badges
        run: for path in .badges/*/*/code; do cp $path/coverage-jest\ coverage.svg $path/coverage.svg; done

      - if: ${{ inputs.generate-badges }}
        name: Generate comment coverage badges
        run: npm run compodoc:build
      - if: ${{ inputs.generate-badges }}
        name: Move comment coverage badges
        run: for path in ./dist/compodoc/*/*; do mkdir -p "./.badges/${path:16}/comment" && cp "$path/images/coverage-badge-documentation.svg" "./.badges/${path:16}/comment/coverage.svg"; done

      - if: ${{ inputs.generate-badges }}
        name: Add badges
        run: git add .badges/

      - name: Release and publish
        run: npx release-it --ci --no-git.requireCleanWorkingDir --preRelease=${{ inputs.pre-release }}
